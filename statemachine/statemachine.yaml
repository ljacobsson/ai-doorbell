StartAt: Parallel image analysis
States:
  Parallel image analysis:
    Type: Parallel
    Next: Has faces?
    Branches:
      - StartAt: Detect faces
        States:
          Detect faces:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:rekognition:detectFaces
            Parameters:
              Attributes:
                - ALL
              Image:
                S3Object:
                  Bucket: ${S3Bucket}
                  Name.$: $.key
            End: true
      - StartAt: Detect labels
        States:
          Detect labels:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:rekognition:detectLabels
            End: true
            Parameters:
              Image:
                S3Object:
                  Bucket: ${S3Bucket}
                  Name.$: $.key
  Has faces?:
    Type: Choice
    Choices:
      - IsPresent: false
        Next: Generic message
        Variable: $[0].FaceDetails[0]
      - And:
          - Not:
              Variable: $[0].FaceDetails[1]
              IsPresent: true
          - Variable: $[0].FaceDetails[0]
            IsPresent: true
        Next: Build single face description
    Default: For each face
  Build single face description:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: ${SingleFaceDescription}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: Send message to notification channels
  Generic message:
    Type: Pass
    Result:
      message: There's someone at the door!
      imageUrl: ""
    Next: Send message to notification channels
  For each face:
    Type: Map
    ItemsPath: $[0].FaceDetails
    ResultPath: $[0]
    Iterator:
      StartAt: Build face description string
      States:
        Build face description string:
          Type: Task
          Resource: arn:aws:states:::lambda:invoke
          OutputPath: $.Payload
          Parameters:
            Payload.$: $
            FunctionName: ${FaceDescription}
          Retry:
            - ErrorEquals:
                - Lambda.ServiceException
                - Lambda.AWSLambdaException
                - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
          End: true
    Next: Combine descriptions
  Combine descriptions:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    OutputPath: $.Payload
    Parameters:
      Payload:
        Descriptions.$: $[0]
        Labels.$: $[1]
        Key.$: $$.Execution.Input.key
        Bucket: ${S3Bucket}
      FunctionName: ${CombineDescriptions}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: Send message to notification channels
  Send message to notification channels:
    Type: Parallel
    End: true
    Branches:
      - StartAt: Get signed image URL
        States:
          Get signed image URL:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            ResultSelector:
              url.$: $.Payload
            ResultPath: $.image
            Parameters:
              Payload:
                Key.$: $$.Execution.Input.key
              FunctionName: ${GetSignedImageURL}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                IntervalSeconds: 2
                MaxAttempts: 6
                BackoffRate: 2
            Next: Parallel
          Parallel:
            Type: Parallel
            Branches:
              - StartAt: Send email
                States:
                  Send email:
                    Type: Task
                    Resource: arn:aws:states:::aws-sdk:ses:sendEmail
                    End: true
                    Parameters:
                      Destination:
                        ToAddresses:
                          - ${ToEmail}
                      Message:
                        Body:
                          Html:
                            Charset: UTF-8
                            Data.$: States.Format('{}<br><img src={}>', $.message, $.image.url)
                        Subject:
                          Charset: UTF-8
                          Data: Doorbell
                      Source: ${FromEmail}
              - StartAt: Send debug message
                States:
                  Send debug message:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    OutputPath: $.Payload
                    Parameters:
                      Payload.$: $
                      FunctionName: ${DebugPublisher}
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 2
                        MaxAttempts: 6
                        BackoffRate: 2
                    End: true
            End: true
      - StartAt: Synthesise speech and send to MQTT topic
        States:
          Synthesise speech and send to MQTT topic:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: arn:aws:lambda:eu-west-1:232740153640:function:doorbell-backend-SynthesizeSpeech-ttZf5KkKxupP
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                IntervalSeconds: 2
                MaxAttempts: 6
                BackoffRate: 2
            End: true
